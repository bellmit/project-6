<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.miguan.bigdata.mapper.PushVideoMapper">

    <select id="findPushVideosInfo" parameterType="java.util.List" resultType="com.miguan.bigdata.dto.PushVideoDto">
         select video_id, play_count playNum, all_play_count playEndNum
         from video_detail
         where dd=toString(toDate(now()))
         and video_id in <foreach collection="videoIds" item="videoId" separator="," open="(" close=")">${videoId}</foreach>
    </select>

    <insert id="batchSavePushVideos"  parameterType="java.util.List">
         insert into push_videos(catid, video_id , video_time,created_at,updated_at)
         select s.cat_id catid,
                s.id video_id,
                toUInt32(toFloat64OrZero(replace(s.video_time,':','.')) *60),
                now() created_at,
                now() updated_at
         from video_info s
         where s.id in <foreach collection="videoIds" item="videoId" separator="," open="(" close=")">${videoId}</foreach>
    </insert>

    <delete id="deletePushVideos" parameterType="java.util.List">
        alter table push_videos delete where video_id in <foreach collection="videoIds" item="videoId" separator="," open="(" close=")">${videoId}</foreach>
    </delete>

    <delete id="deletePushUser" parameterType="map">
        alter table dm_data_product.dm_auto_push_user_local on cluster ck6_s3_r2 delete where dt=#{dt} and user_type = #{userType} and package_name = #{packageName}
    </delete>


    <delete id="deleteOldPushUser" parameterType="int">
        <![CDATA[ alter table dm_data_product.dm_auto_push_user_local on cluster ck6_s3_r2 delete where dt = #{dt} ]]>
    </delete>

    <insert id="batchSaveNewUserNoPlay" parameterType="map">
         /*新用户（激活当天）,20点前新增的用户，且（0-19：59）未产生播放行为*/
        /*新用户（激活当天）,20点后新增的用户，且（20-23：59）未产生播放行为*/
        insert into dm_data_product.dm_auto_push_user_disb(dt,distinct_id,package_name,user_type)
        SELECT #{dt},
               newu.distinct_id as distinct_id,
               #{packageName} as package_name,
               #{userType} as user_type
        FROM
        (
            select distinct_id
            from dw.dwd_user_package_info_disb
            WHERE package_name =#{packageName}
            and first_visit_time BETWEEN #{startTime} and #{endTime}
            GROUP BY distinct_id
        ) newu
        LEFT JOIN (
            SELECT distinct_id
            FROM dw.dws_user_video_hour_disb duvhd
            where dt=#{dt}
            and package_name =#{packageName}
            <if test="userType == 1">
                and `hour` &lt;= 19
            </if>
            <if test="userType == 1">
                and `hour` >= 20
            </if>
            GROUP BY distinct_id
            HAVING SUM(play_count)>0
        ) vplay on newu.distinct_id = vplay.distinct_id
        WHERE vplay.distinct_id=''  /*过滤掉未产生播放行为*/
    </insert>


    <insert id="batchSaveNewUserPlay" parameterType="map">
        /*新用户（激活当天) 当日产生播放行为*/
        insert into dm_data_product.dm_auto_push_user_disb(dt,distinct_id,package_name,user_type)
        SELECT #{dt}, distinct_id, #{packageName}, #{userType}
        FROM dw.dws_user_video_hour_disb duvhd 
        where dt=#{dt}
        and is_new_app=1
        and package_name = #{packageName}
        GROUP BY distinct_id 
        HAVING SUM(play_count)>0
    </insert>

    <insert id="batchSaveOldUserPlay" parameterType="map">
        /*老用户（激活次日以后） 当日产生播放行为*/
        insert into dm_data_product.dm_auto_push_user_disb(dt,distinct_id,package_name,user_type)
        select #{dt},distinct_id,#{packageName},#{userType}
        from (
            select distinct_id 
            from dw.dws_user_video_hour_disb
            where dt=#{dt}
            and is_new_app=0
            and package_name = #{packageName}
            group by distinct_id
            HAVING SUM(play_count)>0
        ) a
        INNER JOIN (
            select distinct_id
            from dw.dwd_user_package_info_disb
            WHERE package_name =#{packageName}
            and toDate(last_access_time) BETWEEN toDate(addDays(now(),#{startDay})) and toDate(addDays(now(),#{endDay}))
            GROUP BY distinct_id 
        ) b ON a.distinct_id = b.distinct_id
    </insert>

    <insert id="batchSaveOldUserNoPlay" parameterType="map">
        /*老用户（激活次日以后） 当日未产生播放行为*/
        insert into dm_data_product.dm_auto_push_user_disb(dt,distinct_id,package_name,user_type)
        select #{dt},a.distinct_id,#{packageName},#{userType}
        from (
            select distinct_id
            from dw.dwd_user_package_info_disb
            WHERE 1=1
            and package_name =#{packageName}
            and toDate(last_access_time) BETWEEN toDate(addDays(now(),#{startDay})) and toDate(addDays(now(),#{endDay}))
            GROUP BY distinct_id
        ) a
        left JOIN (
            select distinct_id
            from dw.dws_user_video_hour_disb
            where dt=#{dt}
            and is_new_app=0
            and package_name = #{packageName}
            group by distinct_id
            HAVING SUM(play_count)>0
        ) b ON a.distinct_id = b.distinct_id
        where b.distinct_id = ''
    </insert>

    <insert id="batchSaveOldUserNoActive" parameterType="map">
        /*不活跃用户（未启动天数>=30天）*/
        insert into dm_data_product.dm_auto_push_user_disb(dt,distinct_id,package_name,user_type)
        select #{dt},distinct_id,#{packageName},#{userType}
        from dw.dwd_user_package_info_disb
        WHERE package_name =#{packageName}
        GROUP BY distinct_id 
        having dateDiff('day',max(last_access_time),now()) BETWEEN #{startDay} and #{endDay}
    </insert>

    <insert id="syncAutoPushLog" parameterType="com.alibaba.fastjson.JSONArray" >
       insert into auto_push_log(package_name,distinct_id,video_id,created_at)
        <foreach collection="list" item="data" separator="," open="values " close="">
            (ifnull(#{data.package_name},''),ifnull(#{data.distinct_id},''),ifnull(#{data.video_id},0),now())
        </foreach>
    </insert>

    <sql id="videoDetailTotal">
        select video_id, sum(vplay_count) vplay_count, sum(play_count) play_count, sum(all_play_count) all_play_count from video_detail group by video_id
    </sql>

    <select id="countPushVideos" resultType="java.lang.Integer">
         select count(1)
         from push_videos v,(<include refid="videoDetailTotal" />)  d
         where v.video_id = d.video_id
    </select>

    <select id="listPushVideos" resultType="com.miguan.bigdata.vo.PushVideoVo" parameterType="map">
         select v.video_id, play_count playNum, vplay_count vplay_num,all_play_count playEndNum
         from push_videos v,(<include refid="videoDetailTotal" />) d
         where v.video_id = d.video_id
         limit #{startRow}, #{pageSize}
    </select>

    <delete id="deletePushVideosMid">
        delete from push_videos_mid
    </delete>

    <insert id="batchSavePushVideosMid" parameterType="java.util.List" >
        insert into push_videos_mid(video_id,play_num,vplay_num,play_end_num,created_at,updated_at)
        <foreach collection="list" item="data" separator="," open="values " close="">
            (#{data.videoId},#{data.playNum},#{data.vplayNum},#{data.playEndNum},now(),now())
        </foreach>
    </insert>

    <update id="updatePushVideosNums">
        update push_videos v,
               (select video_id,max(play_num) play_num, max(vplay_num) vplay_num, max(play_end_num) play_end_num
                from push_videos_mid group by video_id) m
        set v.play_num=m.play_num,v.vplay_num=m.vplay_num,v.play_end_num=m.play_end_num,v.updated_at = now()
        where v.video_id = m.video_id
    </update>

    <select id="findPushConfig" resultType="com.miguan.bigdata.vo.PushConfigVo">
        select app_package package_name,trigger_event type,trigger_type,trigger_time,activity_type_days activityDays
        from auto_push_config
        where status = 1
        and project_type=2
        order by (case when trigger_event=3 then 1 when trigger_event=1 then 3 else trigger_event end)
    </select>


    <select id="findPushConfigUserType" resultType="java.lang.Integer">
        select trigger_event type
        from auto_push_config
        where status = 1
        group by atrigger_event
    </select>

    <insert id="batchStaPushVidosResult" parameterType="map">
        /*用户自动推送表*/
        insert into push_videos_result(dd,distinct_id,package_name,video_id,user_type,sync_tag,created_at)
        select #{dd} sta_date,
               u.distinct_id distinct_id,
               package_name,
               argMax(video_id, vplay_count) r_video_id, /*获取有效播放数最高的视频id*/
               any(u.user_type) r_user_type,
               1 sync_tag,
               now() create_time
        from (select v1.*,d.vplay_count vplay_count from push_videos v1, (<include refid="videoDetailTotal" />) d where v1.video_id=d.video_id) v, push_user u
        where u.user_type = #{userType}
        <![CDATA[ and v.video_time > 60 ]]> /*播放时长大于0秒*/
        and u.dd=#{dd}
        /*去掉用户播放过的视频*/
        and (v.video_id,u.distinct_id,u.package_name ) not in (select DISTINCT a.video_id ,a.distinct_id,a.package_name
                                                                from dw_video_actions a,push_user u1
                                                                where a.distinct_id = u1.distinct_id
                                                                and a.package_name = u1.package_name
                                                                and u1.user_type = #{userType}
                                                                and u1.dd=#{dd}
                                                                and a.play_start = 1
                                                              )
        /*去掉用户已经推送过的视频*/
        and (v.video_id,u.distinct_id,u.package_name ) not in (select DISTINCT a.video_id ,a.distinct_id,a.package_name
                                                                from auto_push_log a,push_user u1
                                                                where a.distinct_id = u1.distinct_id
                                                                and a.package_name = u1.package_name
                                                                and u1.user_type = #{userType}
                                                                and u1.dd=#{dd}
                                                               )
        <if test="userType==3 or userType==4 or userType==5 or userType==6">
            /*查询推荐算法主标签下的视频（用户最近一次播放视频的标签）*/
            and (v.catid,u.distinct_id,u.package_name) in (select argMax(catid, a.receive_time ) r_catid, a.distinct_id,a.package_name
                                                            from dw_video_actions a,push_user u1
                                                            where a.distinct_id = u1.distinct_id
                                                            and a.package_name = u1.package_name
                                                            and u1.user_type = #{userType}
                                                            and u1.dd=#{dd}
                                                            and a.play_start = 1
                                                            and a.catid > 0
                                                            group by a.distinct_id,a.package_name
                                                          )
        </if>
        group by u.distinct_id,u.package_name
    </insert>

    <delete id="deletePushVideosResult" parameterType="map">
        alter table push_videos_result delete where dd=#{dd} and user_type=#{userType} and sync_tag=0
    </delete>

    <update id="updatePushVideosResultTag">
        alter table push_videos_result update sync_tag=0 where dd=#{dd}  and user_type=#{userType} and sync_tag = 1
    </update>

    <delete id="deleteOldPushVideosResult" parameterType="java.lang.String">
        <![CDATA[  alter table push_videos_result delete where dd < #{dd} and sync_tag=0 ]]>
    </delete>

    <delete id="deleteAutoPushUserVideo" parameterType="map">
         delete from auto_push_user_video where date(`date`)=#{date} and user_type=#{userType} and package_name=#{packageName}
    </delete>
    
    <insert id="insertAutoPushUserVideo" parameterType="map">
        INSERT into table mysql_data_server.${tableName} (user_type, distinct_id, video_id,created_at)
        SELECT #{userType} as user_type,
               uu.distinct_id as distinct_id,
               argMax(uu.video_id, vv.vplay_count) as video_id,
               now()
        FROM
        (
          SELECT
            u.distinct_id as distinct_id,
            <if test="userType==1 or userType==2 or userType==6">
                arrayJoin(bitmapToArray(bitmapAndnot(v1.video_map, bitmapOr(pl.videos, pu.videos)))) as video_id
            </if>
            <if test="userType==3 or userType==4 or userType==5">
                /*查询推荐算法主标签下的视频（用户最近一次播放视频的标签）*/
                arrayJoin(bitmapToArray(bitmapAndnot(bitmapAnd(v1.video_map,pw.videos), bitmapOr(pl.videos, pu.videos)))) as video_id
            </if>
          FROM
          (
            SELECT 1 as join_key, distinct_id
            FROM dm_data_product.dm_auto_push_user_disb pu
            where dt=#{dt}
            and user_type = #{userType}
            and package_name = #{packageName}
          ) u
          LEFT JOIN
          (
            SELECT 1 as join_key, groupBitmapState(CAST(video_id,'UInt32')) as video_map
            from mysql_ballvideo.push_videos pv
          ) v1 on u.join_key = v1.join_key
          LEFT JOIN
          (/*已播放过的视频*/
            select distinct_id,
                   groupBitmapState(video_id) as videos
            FROM (
                    select
                        distinct_id,
                        video_id as video_id
                    from dw.dws_user_video_hour_disb duvhd
                    where dt=#{dt}
                    and package_name = #{packageName}
                    and play_count>0
                    GROUP BY distinct_id,video_id
                    UNION ALL
                    select distinct_id,
                           arrayJoin(bitmapToArray(videos)) as video_id
                    FROM dw.dws_user_play_videos_disb
                    where dt=toYYYYMMDD(addDays(now(),-1))
                    and package_name = #{packageName}
                 ) a group by distinct_id
          ) pl on u.distinct_id = pl.distinct_id
          LEFT JOIN
          (/*已推送过的视频*/
            select distinct_id,
                   groupBitmapState(video_id) as videos
            FROM (
                  select distinct_id,
                         CAST(video_id,'UInt32') as video_id
                  from dw.dwd_push_log_disb duvhd
                  where dt=#{dt}
                  and video_id>0
                  and push_method=2 /*推送方式：自动推送*/
                  and if(app_package='xld','com.mg.phonecall',app_package) = #{packageName}
                  GROUP BY distinct_id,video_id
                  UNION ALL
                  select distinct_id,
                         arrayJoin(bitmapToArray(videos)) as video_id
                  FROM dw.dws_user_push_videos_disb
                  where dt= toYYYYMMDD(addDays(now(),-1))
                  and push_method=2 /*推送方式：自动推送*/
                  and package_name = #{packageName}
                ) a group by distinct_id
          ) pu  on u.distinct_id = pu.distinct_id
        <if test="userType==3 or userType==4 or userType==5">
              LEFT JOIN
              (/*用户最近一次播放视频的标签下的视频*/
                select distinct_id,
                       groupBitmapState(b.video_id) videos
                from (
                    select distinct_id, argMax(tag_category_id, receive_time ) tag_category_id
                    from dw.dws_user_video_hour_disb duvhd
                    where package_name = #{packageName}
                    and play_count>0
                    GROUP BY distinct_id
                ) a inner join (
                    select fv.cat_id, toUInt32(fv.id) video_id
                    from mysql_ballvideo.push_videos pv
                    inner join mysql_ballvideo.first_videos fv on pv.video_id = toInt32(fv.id)
                ) b on a.tag_category_id= toUInt16(b.cat_id)
                group by distinct_id
              ) pw on u.distinct_id = pw.distinct_id
        </if>
        ) uu
        LEFT JOIN
        (
          select video_id, vplay_count
          from
          (
            select video_id,SUM(vaild_play_count) as  vplay_count
            FROM dw.dws_video_day_disb dvdd
            group by video_id
          ) v0
          JOIN
          (
            SELECT CAST(video_id,'UInt32') video_id
            from mysql_ballvideo.push_videos pv
            group by video_id
          ) v1 on v0.video_id = v1.video_id
        ) vv on uu.video_id =vv.video_id
        group by distinct_id
    </insert>

    <select id="findPushVideosResult" parameterType="map" resultType="com.miguan.bigdata.vo.PushResultVo">
        select distinct_id, #{packageName} package_name, video_id
        from ${tableName}
        limit #{startRow},#{endRow}
    </select>

    <select id="staOldVideoItem" resultType="map" parameterType="string">
        select date, package_name packageName, user_type userType
        from auto_push_user_video
        where date = #{dd}
        group by date,package_name,user_type
    </select>

    <update id="optimizeTable">
        optimize table ${tableName}
    </update>

    <select id="isExistAutoPushTable" parameterType="string" resultType="int">
      select count(1) from INFORMATION_SCHEMA.TABLES where table_name=#{tableName}
    </select>

    <select id="findOldAutoPushTable" parameterType="string" resultType="string">
        select table_name from INFORMATION_SCHEMA.TABLES where table_name like concat('push_com', '%', #{dt})
    </select>
    
    <update id="createAutoPushTable" parameterType="string">
        CREATE TABLE ${tableName} (
          `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',
          `user_type` int(5) DEFAULT NULL COMMENT '用户类型，1:用户（激活当天）,20点前新增的用户，且（0-19：59）未产生播放行为;2:新用户（激活当天）,20点后新增的用户，且（20-23：59）未产生播放行为3:新用户（激活当天) 当日产生播放行为4:老用户（激活次日以后） 当日产生播放行为5:老用户（激活次日以后） 当日未产生播放行为6:不活跃用户（未启动天数>=30天）',
          `distinct_id` varchar(255) NOT NULL DEFAULT '' COMMENT '设备id',
          `video_id` int(11) DEFAULT NULL COMMENT '用于推送的视频id',
          `created_at` datetime NOT NULL COMMENT '创建时间',
          PRIMARY KEY (`id`) USING BTREE
        ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT='视频自动推送分表（按包名，用户类型，日期分表）';
    </update>

    <update id="dropAutoPushTable" parameterType="string">
        drop table ${tableName}
    </update>

    <select id="findMaxVideoUpdatedTime" resultType="java.lang.String">
        select max(updated_at) from video_info
    </select>

    <select id="countNewVideos" parameterType="java.lang.String" resultType="java.lang.Integer">
        select count(1)
        from first_videos v, videos_cat c
        where v.cat_id = c.id
        and v.updated_at &gt;  #{maxUpdateTime}
    </select>

    <select id="queryNewVideos" parameterType="map" resultType="com.miguan.bigdata.vo.FirstVideosPushVo">
        select v.*, c.name cat_name, c.ascription_application
        from first_videos v, videos_cat c
        where v.cat_id = c.id
        and v.updated_at &gt;  #{maxUpdateTime}
        limit #{startRow}, #{pageSize}
    </select>

    <delete id="deleteVideoInfoById" parameterType="java.util.List">
        alter table video_info delete where id in <foreach collection="dataList" item="data" separator="," open="(" close=")">#{data.id}</foreach>
    </delete>

    <insert id="batchInsertUpdateVideo" parameterType="com.miguan.bigdata.vo.FirstVideosPushVo">
        insert into video_info(id,cat_id,cat_name,title,url,url_audio,url_img,url_headimg,local_url,local_audio_url,local_img_url,bsy_url,bsy_audio_url,
        bsy_img_url,bsy_head_url,video_author,collection_count,love_count,comment_count,watch_count,click_count,show_count,ctr,created_at,
        updated_at,state,video_time,local_headimg,report,share_count,fake_share_count,play_all_count,base_weight,video_size,real_weight,
        play_count,gather_id,watch_count_real,love_count_real,video_hour,is_incentive,user_id,package_name,brief,online_state,update_type,
        exam_state,audit_at,exposure_num,compare_show_expo,offline_state,offline_time,width,height,width_height_text,verify_date,online_date,
        bsy_m3u8,videos_source,encryption_android_url,encryption_ios_url,encryption_xcx_url,deleted_at,ascription_application,sensitive)
        <foreach collection="dataList" item="data" separator="," open="values " close="">
            (ifnull(#{data.id},0),ifnull(#{data.catId},0),ifnull(#{data.catName},''),ifnull(#{data.title},''),ifnull(#{data.url},''),ifnull(#{data.urlAudio},''),ifnull(#{data.urlImg},''),
            ifnull(#{data.urlHeadimg},''),ifnull(#{data.localUrl},''),ifnull(#{data.localAudioUrl},''),ifnull(#{data.localImgUrl},''),ifnull(#{data.bsyUrl},''),
            ifnull(#{data.bsyAudioUrl},''),ifnull(#{data.bsyImgUrl},''),ifnull(#{data.bsyHeadUrl},''),ifnull(#{data.videoAuthor},''),ifnull(#{data.collectionCount},0),
            ifnull(#{data.loveCount},0),ifnull(#{data.commentCount},0),ifnull(#{data.watchCount},0),ifnull(#{data.clickCount},0),ifnull(#{data.showCount},0),
            ifnull(#{data.ctr},0.0),ifnull(#{data.createdAt},toDate('1980-01-01')),ifnull(#{data.updatedAt},toDate('1980-01-01')),ifnull(#{data.state},0),ifnull(#{data.videoTime},''),
            ifnull(#{data.localHeadimg},''),ifnull(#{data.report},0),ifnull(#{data.shareCount},0),ifnull(#{data.fakeShareCount},0),ifnull(#{data.playAllCount},0),
            ifnull(#{data.baseWeight},0),ifnull(#{data.videoSize},''),ifnull(#{data.realWeight},0),ifnull(#{data.playCount},0),ifnull(#{data.gatherId},0),
            ifnull(#{data.watchCountReal},0),ifnull(#{data.loveCountReal},0),ifnull(#{data.videoHour},0),ifnull(#{data.isIncentive},0),ifnull(#{data.userId},0),
            ifnull(#{data.packageName},''),ifnull(#{data.brief},''),ifnull(#{data.onlineState},0),ifnull(#{data.updateType},0),ifnull(#{data.examState},0),
            ifnull(#{data.auditAt},toDate('1980-01-01')),ifnull(#{data.exposureNum},0),ifnull(#{data.compareShowExpo},0),ifnull(#{data.offlineState},0),
            ifnull(#{data.offlineTime},toDate('1980-01-01')),ifnull(#{data.width},''),ifnull(#{data.height},''),ifnull(#{data.widthHeightText},''),
            ifnull(#{data.verifyDate},toDate('1980-01-01')),ifnull(#{data.onlineDate},toDate('1980-01-01')),ifnull(#{data.bsyM3u8},''),ifnull(#{data.videosSource},''),
            ifnull(#{data.encryptionAndroidUrl},''),ifnull(#{data.encryptionIosUrl},''),ifnull(#{data.encryptionXcxUrl},''),ifnull(#{data.deletedAt},toDate('1980-01-01')),
            ifnull(#{data.ascriptionApplication},''),ifnull(#{data.sensitive},-1))
        </foreach>
    </insert>

    <delete id="deleteVideoDetail" parameterType="java.lang.String">
        alter table video_detail delete where dd= #{day}
    </delete>

    <insert id="batchSaveVideoDetail" parameterType="java.lang.String">
        insert into video_detail(id,dd,package_name,app_version,video_id,catid,section6,section9,show_count,play_count,show_user,play_user,play_time_real,vplay_count,vplay_user,all_play_count,all_play_user,like_count,like_user,
                                 share_count,share_user,fav_count,fav_user,cat_show_count,dd_show_count,cat_play_count,dd_play_count)
        select id,a.dd dd,package_name,app_version, video_id,a.catid catid,section6,section9,show_count,play_count,show_user,play_user,play_time_real,vplayCount,vplay_user,all_play_count,all_play_user,like_count,like_user,share_count,
               share_user,fav_count,fav_user, ifnull(cat_show_count,0) cat_show_count, ifnull(dd_show_count,0) dd_show_count, ifnull(cat_play_count,0) cat_play_count, ifnull(dd_play_count,0) dd_play_count
        from (
            select
                   sipHash64(toYYYYMMDDhhmmss(now()), video_id) id,
                   dd,
                   anyLast(package_name) package_name,
                   anyLast(app_version) app_version,
                   video_id, /*视频id*/
                   vi.cat_id catid, /*视频分类id*/
                   sum(show) show_count,  /*曝光次数*/
                   sum(play_start) play_count,  /*播放次数*/
                   ifnull(count(distinct if(show=1,distinct_id,null)),0) show_user,  /*曝光用户*/
                   ifnull(count(distinct if(play_start=1,distinct_id,null)),0) play_user,  /*播放用户*/
                   sum(if(is_play_time=1,play_time_r,0)) play_time_real,  /*视频播放时长*/
                   sum(is_play_valid) vplayCount,   /*有效播放次数*/
                   ifnull(count(distinct if(is_play_valid=1,distinct_id,null)),0) vplay_user, /*有效播放用户*/
                   sum(is_play_end) all_play_count,     /*完播次数*/
                   ifnull(count(distinct if(is_play_end=1,distinct_id,null)),0) all_play_user,/*完播用户数*/
                   sum(praise) like_count, /*点赞数*/
                   ifnull(count(distinct if(praise=1,distinct_id,null)),0) like_user, /*点赞用户数*/
                   sum(share) share_count,/*分享数*/
                   ifnull(count(distinct if(share=1,distinct_id,null)),0) share_user,/*分享用户数*/
                   sum(collect) fav_count, /*收藏数*/
                   ifnull(count(distinct if(collect=1,distinct_id,null)),0) fav_user/*收藏用户数*/,
                   (case when show_count between 1 and 20 then '1~20'
						 when show_count between 21 and 50 then '21~50'
						 when show_count between 51 and 100 then '51~100'
						 when show_count between 101 and 300 then '101~300'
						 when show_count between 301 and 500 then '301~500'
						 when show_count >500 then '>500'
						 else ''
                    end) section6,  /*6纬度的曝光区间*/
                   (case when show_count between 1 and 20 then '1~20'
						 when show_count between 21 and 50 then '21~50'
						 when show_count between 51 and 100 then '51~100'
						 when show_count between 101 and 300 then '101~300'
						 when show_count between 301 and 500 then '301~500'
						 when show_count between 501 and 1000 then '501~1000'
						 when show_count between 1000 and 2000 then '1000~2000'
						 when show_count between 2000 and 3000 then '2000~3000'
						 when show_count >3000 then '>3000'
						 else ''
                    end) section9  /*9纬度的曝光区间*/
            from dw_video_actions_aggregation v inner join video_info vi on v.video_id = vi.id
            where dd=#{day}
            and video_id > 0
            group by dd,vi.cat_id,video_id
        ) a left join (
            select
                dd,
                vi.cat_id catid,
                sum(show) cat_show_count,  /*分类曝光数*/
                sum(play_start) cat_play_count   /*分类播放数*/
            from dw_video_actions_aggregation v inner join video_info vi on v.video_id = vi.id
            where dd=#{day}
            and video_id > 0
            group by dd, vi.cat_id
        ) b on a.dd=b.dd and a.catid=b.catid
        left join (
            select
                dd,
                sum(show) dd_show_count,  /*天曝光数*/
                sum(play_start) dd_play_count  /*天播放数*/
            from dw_video_actions_aggregation
            where dd=#{day}
            and video_id > 0
            group by dd
        ) c on a.dd=c.dd
    </insert>
</mapper>
