<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.miguan.bigdata.mapper.UserCatPoolMapper">
    <sql id="where-sql">
        <where>
            <if test="appPackage != null and appPackage != ''">
                package_name = #{appPackage}
            </if>
            <if test="channels != null and !channels.isEmpty">
                and channel in (
                  <foreach collection="channels" item="channel" separator=",">
                      #{channel}
                  </foreach>
                )
            </if>
        </where>
    </sql>
    <select id="countDistinictIdWhereTopThreeInCatids" parameterType="java.util.Map" resultType="java.lang.Long">
        SELECT count(DISTINCT distinct_id) from (
            SELECT  distinct_id, groupArray(catid) AS arrVal from (
                SELECT distinct_id, catid from dwd_user_cat_pool_disb
                  <include refid="where-sql" />
                 order by receive_time DESC
            ) a GROUP by distinct_id
        ) b where hasAny(arraySlice(arrVal, 1, 3), #{catids}) = 1 and distinct_id != ''
    </select>

    <select id="findDistinictIdWhereTopThreeInCatids" parameterType="java.util.Map" resultType="java.lang.String">
        SELECT DISTINCT distinct_id from (
            SELECT  distinct_id, groupArray(catid) AS arrVal from (
              SELECT distinct_id, catid from dwd_user_cat_pool_disb
                  <include refid="where-sql" />
                 order by receive_time DESC
            ) a GROUP by distinct_id
        ) b where hasAny(arraySlice(arrVal, 1, 3), #{catids}) = 1 and distinct_id != ''
        <if test="skipNum != null and size != null">
            limit #{skipNum},#{size}
        </if>
    </select>

    <insert id="initManualPushDistinct" parameterType="java.util.Map">
        insert
            into
            mysql_npush.manual_push_distinct (dt, business_id, package_name, change_channel, distinct_id, receive_time)
        SELECT
            #{dt} as dt,
            #{businessId} as business_id,
            package_name,
            change_channel,
            distinct_id,
            receive_time
        from
            (
            SELECT
                anyLast(package_name) as package_name, anyLast(change_channel) as change_channel, distinct_id, groupArray(catid) AS arrVal, anyLast(receive_time) AS receive_time
            from
                (
                SELECT
                    package_name, change_channel, distinct_id, catid, receive_time
                from
                    dwd_user_cat_pool_disb
                where
                    receive_time &gt;= #{receiveTime}
                order by
                    receive_time DESC ) a
            GROUP by
                distinct_id ) b
        where
            hasAny(arraySlice(arrVal, 1, 3), #{catids}) = 1
            and distinct_id != '';
    </insert>
</mapper>